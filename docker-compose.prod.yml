version: '3.8'

services:
  app:
    build:
      context: .
      target: production
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENV=production
      - DEBUG=false
      - CORS_ORIGINS=["http://localhost:3000", "http://web:3000", "https://yourdomain.com"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
    networks:
      - sms-network

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_APP_NAME=School Management System
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    restart: unless-stopped
    depends_on:
      - app
    networks:
      - sms-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-sms_prod}
      - POSTGRES_USER=${DB_USER:-sms_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sms_user} -d ${DB_NAME:-sms_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sms-network

volumes:
  postgres_data:

networks:
  sms-network:
    driver: bridge
